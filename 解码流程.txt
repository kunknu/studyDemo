变量：
AVFormatContext  *pFormatCtx;
int  videoIndex;
AVCodecContext  *pCodecCtx;
AVCodec *pCodec;


函数：
//初始化
av_register_all();
avformat_network_init();
pFormatCtx = avformat_alloc_context();
//打开文件
avformat_open_input( &pFormatCtx, filepath, NULL, NULL) != 0  fail 

av_find_stream_info(pFormatCtx) < 0 fail
//遍历流
for pFormatCtx->nb_streams
if( pFormatCtx->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO )
	videoIndex  = i;
	break;
//打开解码器
pCodecCtx = pFormatCtx -> streams[videoIndex] -> codec;
pCodec = avcodec_find_decoder(pCodeCtx->codec_id);  if NULL fail 

if( avcodec_open2(pCodecCtx, pCode, NULL, NULL) < 0 ); fail 

//给AVFrame分配空间
变量：
AVFrame *pFrame *pFrameYUV;
uint8_t *out_buffer;

函数：
pFrame = avcodec_alloc_frame();
pFrameYUV = avcodec_alloc_frame();
out_buffer = new uint8_t[ avpicture_get_size( PIX_FMT_YUV420P, pCodecCtx->width, pCodecCtx->heigth ) ];
avpicture_fill( (AVPicture*)pFrame, out_buffer, PIX_FMT_YUV420P, pCodecCtx->width, pCodecCtx->heigth);

//设置YUV转换变量和函数
int got_picture;
int y_size = pCodecCtx->width * pCodecCtx->heigth;
AVPacket *packet = (AVPacket*) av_malloc( sizeof(AVPacket *)); //给指针申请空间
av_new_packet( packet, y_size ); //实际给pakcet申请空间的函数
av_dump_format( pFormatCtx, 0 , filePath, 0); //打印视频信息 

struct SwsContext img_convert_ctx;
img_convert_ctx = sws_getContext( pCodecCtx->width, pCodecCtx->heigth, pCodecCtx->pix_fmt,  pCodecCtx->width, pCodecCtx->heigth, PIX_FMT_YUV420P, SWS_BICBIC, NULL, NULL, NULL);

while( av_read_frame( pFormatCtx, packet) >=0 )
	if( packet->stream_index == videoIndex )
		if( avcodec_decode_video2( pCodecCtx, pFrame, &got_picture, packet)< 0 ) fail 
		if( got_picture )
			sws_scale( img_convert_ctx, (const uint8_t* const*)pFrame->data, pFrame->linesize, pCodecCtx->heigth, pFrameYUV->data, pFameYUV->linesize);
			/*
				show frame (SDL、QTpainter、canvas)
			*/
	av_free_packet( packet );
sws_freeContext( img_convert_ctx );

delete[] out_buffer;
av_free( pFrameYUV);
avcodec_close( pCodecCtx);
avformat_close_input( &pFormatCtx);













